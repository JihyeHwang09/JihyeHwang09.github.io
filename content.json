{"meta":{"title":"꿈꾸는 지구별 개발자, Phang","subtitle":"꿈꾸는 지구별 개발자, Phang's IT Blog","description":"Phang's IT Blog using Hexo","author":"Phang","url":"https://JihyeHwang09.github.io"},"pages":[],"posts":[{"title":"카르노 도표(KARNAUGH MAP)","slug":"karnaugh-map","date":"2019-01-06T13:53:35.896Z","updated":"2019-01-06T14:53:21.991Z","comments":true,"path":"2019/01/06/karnaugh-map/","link":"","permalink":"https://JihyeHwang09.github.io/2019/01/06/karnaugh-map/","excerpt":"","text":"부울함수의 간소화 방법 중의 하나인 카르노 도표(KARNAUGH MAP)에 대해 알아봅시다. 카르노 도표 방법 카르노 도표는 여러 개의 사각형으로 된 다이어그램 사각형은 각각 하나의 최소항이나 최대항을 의미 여섯 개 이하의 변수를 가진 부울함수에 사용 카르노 도표는 부울함수의 입력변수의 수에 따라서 기본 도표의 형태가 결정됨 입력변수의 수가 n인 경우를 n변수 카르노 도표라고 하며, 2^n개의 사각형으로 구성됨 카르노 도표를 이용하면, 정규형 부울 함수 -&gt; 표준형 부울함수로 간소화할 수 있음 카르노 도표를 이용해서 부울함수의 각 항들을 곱이나 합 형태로 간소화 최소항의 합 -&gt; 곱의 합 최대항의 곱 -&gt; 합의 곱 형태로 간소화 됨 최소항의 합형을 곱의 합형으로 간소화하는 순서 입력변수의 수 n에 따라 n변수 카르노 도표 작성(도표는 2^n개의 정사각형) 최소항의 인덱스에 대응되는 사각형을 1로 표시 1로 표시된 사각형들 중 서로 인접한 사각형끼리 묶음 (주의! 이때 한 묶음은 크게, 전체 묶음의 수는 적게 묶는다.) 각 묶음이 입력변수 각각에 대해 도표상의 어떤 위치에 있는지 파악 4)에서 구한 각 묶음에 대한 곱항들을 논리합(OR)으로 연결시키면, 간소화된 표준형(곱의 합형)이 구해진다. 최대항의 곱형을 합의 곱형으로 간소화하는 순서 입력변수의 수 n에 따라 n변수 카르노 도표 작성(도표는 2^n개의 정사각형) 최소항의 인덱스에 대응되는 사각형을 0으로 표시 0으로 표시된 사각형들 중 서로 인접한 사각형끼리 묶음 (주의! 이때 한 묶음은 크게, 전체 묶음의 수는 적게 묶는다.) 각 묶음이 입력변수 각각에 대해 도표상의 어떤 위치에 있는지 파악 4)에서 구한 각 묶음에 대한 합항들을 논리곱(AND)으로 연결시키면, 간소화된 표준형(합의 곱형)이 구해진다. 인접 사각형의 정의 카르노 도표에서 각 정사각형은 하나의 최소항(또는 최대항)을 의미 따라서, 인접 사각형이란 두 정사각형에 대응되는 각 최소항(또는 최대항)의 구성변수 중 다른 모든 변수는 동일하되 오직 하나의 변수만 서로 보수관계에 있을 때 두 정사각형은 서로 인접한다”라고 정의 ex) 입력변수가 X, Y, Z 3개의 경우 인접 사각형끼리 묶는 방법 한 묶음 내의 정사각형의 수는 2^n(n = 0, 1, 2... n)개가 되도록 묶는다. 한 묶음은 크게, 전체 묶음의 수는 적게 묶는다.","categories":[{"name":"정보처리기사","slug":"정보처리기사","permalink":"https://JihyeHwang09.github.io/categories/정보처리기사/"},{"name":"전자계산기 구조","slug":"정보처리기사/전자계산기-구조","permalink":"https://JihyeHwang09.github.io/categories/정보처리기사/전자계산기-구조/"}],"tags":[{"name":"정보처리기사","slug":"정보처리기사","permalink":"https://JihyeHwang09.github.io/tags/정보처리기사/"},{"name":"전자계산기 구조","slug":"전자계산기-구조","permalink":"https://JihyeHwang09.github.io/tags/전자계산기-구조/"},{"name":"논리회로","slug":"논리회로","permalink":"https://JihyeHwang09.github.io/tags/논리회로/"},{"name":"카르노 도표","slug":"카르노-도표","permalink":"https://JihyeHwang09.github.io/tags/카르노-도표/"},{"name":"카르노 맵","slug":"카르노-맵","permalink":"https://JihyeHwang09.github.io/tags/카르노-맵/"},{"name":"karnaugh map","slug":"karnaugh-map","permalink":"https://JihyeHwang09.github.io/tags/karnaugh-map/"}]},{"title":"논리게이트(LOGIC GATE)","slug":"logic-gate","date":"2019-01-05T09:18:57.757Z","updated":"2019-01-06T14:11:16.959Z","comments":true,"path":"2019/01/05/logic-gate/","link":"","permalink":"https://JihyeHwang09.github.io/2019/01/05/logic-gate/","excerpt":"","text":"논리게이트(LOGIC GATE)의 종류에는 어떤 것들이 있는지와 각 논리게이트에 대한 기호, 진리표, 입출력 파형에 대해 알아봅시다. 논리게이트(LOGIC GATE)의 종류기본 논리게이트 AND 게이트 OR 게이트 NOT 게이트 NAND 게이트와 NOR 게이트 NAN 게이트 NOR 게이트 XOR 게이트와 XNOR 게이트 XOR 게이트 XNOR 게이트 논리게이트(LOGIC GATE)의 기호와 진리표, 입출력 파형1. 기본 논리게이트1) AND 게이트 반달 모양으로 표현 입력값이 둘 다 1일 경우에만 1이 출력되고, 나머지 경우에는 결과값이 0이 된다. 2) OR 게이트 반달 모양이되, 입력 부분이 움푹 들어간 모양으로 표현 입력값이 둘 다 0일 경우에만 결과값이 0이 되고,나머지 경우에는 결과값이 1이 된다. 3) NOT 게이트 세모 모양으로 표현, 출력부분에 작은 원을 그려준다. 입력값과 반대값이 출력된다. 2. NAND 게이트와 NOR 게이트1) NAND 게이트 AND 게이트의 반대 입력값이 둘 다 1일 경우에만 0이 출력되고, 나머지 경우에는 결과값이 1이 된다. 2) NOR 게이트 OR 게이트의 반대 입력값이 둘 다 0일 경우에만 1이 출력되고, 나머지 경우에는 결과값이 0이 된다. 반달 모양이되, 출력부분에 작은 원을 그려준다. 3. XOR 게이트와 XNOR 게이트1) XOR 게이트 입력값이 서로 다른 값이 들어온 경우에만 결과값이 1이 된다. 나머지 경우에는 0이 출력된다. 2) XNOR 게이트 입력값으로 서로 다른 값이 들어온 경우에만 결과값이 0이 된다. 나머지 경우에는 1이 출력된다.","categories":[{"name":"정보처리기사","slug":"정보처리기사","permalink":"https://JihyeHwang09.github.io/categories/정보처리기사/"},{"name":"전자계산기 구조","slug":"정보처리기사/전자계산기-구조","permalink":"https://JihyeHwang09.github.io/categories/정보처리기사/전자계산기-구조/"}],"tags":[{"name":"정보처리기사","slug":"정보처리기사","permalink":"https://JihyeHwang09.github.io/tags/정보처리기사/"},{"name":"전자계산기 구조","slug":"전자계산기-구조","permalink":"https://JihyeHwang09.github.io/tags/전자계산기-구조/"},{"name":"논리회로","slug":"논리회로","permalink":"https://JihyeHwang09.github.io/tags/논리회로/"},{"name":"논리게이트","slug":"논리게이트","permalink":"https://JihyeHwang09.github.io/tags/논리게이트/"},{"name":"logic gate","slug":"logic-gate","permalink":"https://JihyeHwang09.github.io/tags/logic-gate/"}]},{"title":"불 대수(Boolean algebra)","slug":"boolean-algebra","date":"2019-01-03T17:20:57.925Z","updated":"2019-01-03T19:38:27.907Z","comments":true,"path":"2019/01/04/boolean-algebra/","link":"","permalink":"https://JihyeHwang09.github.io/2019/01/04/boolean-algebra/","excerpt":"","text":"2진 디지털 시스템에서 입출력 관계를 표현하는 방법과 불 대수의 기본 개념 및 공식에 대해서 알아보고, 불 함수의 대수적 간소화에 대해서 공부해봅시다. 1. 2진 디지털 시스템에서 입출력 관계를 표현하는 방법1) 그래프나 진리표로 표시 2) 논리함수로 표시 입력에 따라 변수가 어떻게 변하는지를 나타내는 함수로 표현 입력이 2진 논리값이므로 논리함수로 나타낸다. 2. 불 대수의 기본 개념1) 불 대수(Boolean Algebra): 0과 1의 값을 갖는 논리변수와 논리연산을 다루는 대수 불 대수(Boolean algebra)는 하나의 명제가 참 또는 거짓인지를 판별하기 위해 이용되는 수학적 방법으로 19세기 중반 영국의 수학자 조지 불(George Boole)에 의해 개발되었다. 컴퓨터는 참과 거짓을 나타내기 위해 0과 1의 두 가지 상태로 표현하는 2진 논리회로로 구성되어 있다. 이러한 논리회로를 간략하게 표현할 때 불 대수가 사용된다. 2) 불 함수(Boolean Function): 논리변수의 상호관계를 나타내기 위해 불 변수, 불 연산기호, 괄호 및 등호 등으로 나타내는 대수적인 표현 AND 연산 입력값이 모두 1일 경우에만 결과값이 1이 된다. 표현법 X AND Y 또는 XY로 표현한다. 점으로 표시, 생략 가능 OR 연산 입력값 중 한 개라도 1일 경우 결과값이 1이 된다. 표현법 X OR Y 또는 X + Y로 표현한다. 덧셈 기호(+)로 표시 NOT 연산 입력값의 반대값이 출력된다. 표현법: NOT X 또는 X&#39;로 표현 변수 위에 줄(-)을 그어 표시 3. 불 대수의 기본 공식교환법칙, 결합법칙, 분배법칙, 드모르간의 법칙, 흡수 법칙 등을 이용하여회로를 쉽게 간소화할 수 있다. 4. 불 함수(논리식)의 대수적 간소화불 대수의 기본 공식을 이용해서 논리식을 간소화한다. 1) 합의 곱 표현을 곱의 합표현으로 변환한다. 합의 곱: (A + B)(C + D) 곱의 합: AC + AD + BC + BD 2) 공통 인수를 뽑아서 묶는다.3) 기본 공식 형태로 유도해서 식을 줄여 나간다.항 결합 X + X&#39; = 1이라는 성질을 이용한다. 문자 소거","categories":[{"name":"정보처리기사","slug":"정보처리기사","permalink":"https://JihyeHwang09.github.io/categories/정보처리기사/"},{"name":"전자계산기 구조","slug":"정보처리기사/전자계산기-구조","permalink":"https://JihyeHwang09.github.io/categories/정보처리기사/전자계산기-구조/"}],"tags":[{"name":"정보처리기사","slug":"정보처리기사","permalink":"https://JihyeHwang09.github.io/tags/정보처리기사/"},{"name":"전자계산기 구조","slug":"전자계산기-구조","permalink":"https://JihyeHwang09.github.io/tags/전자계산기-구조/"},{"name":"논리회로","slug":"논리회로","permalink":"https://JihyeHwang09.github.io/tags/논리회로/"},{"name":"boole","slug":"boole","permalink":"https://JihyeHwang09.github.io/tags/boole/"},{"name":"boolean algebra","slug":"boolean-algebra","permalink":"https://JihyeHwang09.github.io/tags/boolean-algebra/"}]},{"title":"Hexo를 이용한 블로그 만들기","slug":"hexo-blog","date":"2019-01-03T09:09:51.675Z","updated":"2019-01-06T14:35:43.749Z","comments":true,"path":"2019/01/03/hexo-blog/","link":"","permalink":"https://JihyeHwang09.github.io/2019/01/03/hexo-blog/","excerpt":"","text":"지난 포스트에서 정적블로그 플랫폼의 종류와 차이에 대해 소개했습니다.이번에는 Hexo를 이용한 블로그 만드는 방법에 대해 정리해봅시다. 1. Git, Nods.js 설치하기Hexo 블로그를 만들기 전, Git과 Node.js가 설치되어 있어야 합니다.Git과 Node.js가 이미 설치되어 있으신 분들은 2번부터 읽으시면 됩니다:) 1) Git 설치Git 다운로드 페이지 2) Node.js 설치Node.js 다운로드 페이지 2. GitHub 프로젝트(Repository) 만들기블로그의 포스트를 관리할 GitHub Repository를 만드는 과정입니다. GitHub 홈페이지 GitHub에 회원가입 후, 로그인을 합니다. 로그인 후, 우측 상단에 있는 초록색의 New를 눌러줍니다. Repository name에는 GitHub 계정명과 동일한 username을 사용하여 username.github.io로 작성한 후, Create repository 버튼을 누릅니다. 3. Hexo 설치하기 Git을 설치하면,Git Bash가 있으실 겁니다. 1) Git Bash를 실행시킵니다. 2) 터미널 화면에 $를 제외한 부분을 작성하고 Enter를 누르면,Hexo가 설치됩니다.1$ npm install -g hexo-cli 3) 블로그를 만들고 싶은 폴더 위치로 이동합니다. 그 후, 아래 코드를 입력합니다.blog 자리에 자신이 원하는 블로그 이름을 넣습니다.1$ hexo init blog 4) 자신이 원하는 폴더 위치에 blog 이름으로 된 폴더가 생성됩니다.현재 위치에서 블로그 이름으로 된 폴더로 이동합니다.1$ cd blog 5) npm을 설치합니다.1$ npm install 4. Hexo 실행해보기1$ hexo server 로컬서버인 http://localhost:4000로 접속하면, Hexo 블로그가 만들어진 것을 확인할 수 있습니다. Hexo 서버를 종료하려면, Ctrl + C를 눌러줍니다. Tip! 코드를 복사하고 싶은 경우에는 Ctrl + C가 아닌, Ctrl+Ins를 눌러줍니다. 5. Hexo 포스트 작성하기위와 같이 Hexo 설치가 완료되었다면, 이제 포스트를 작성해볼까요? 기본 명령어와 축약 명령어 중에 편하신 명령어를 입력해 줍니다. hexo new나 hexo n 뒤에는 포스트 제목을 적어줍니다. 1234$ hexo new firstpost// 기본 명령어$ hexo n firstpost// 축약 명령어 위의 명령어를 실행하여, firstpost.md라는 마크다운 파일을 생성합니다. 1$ code . 현재 생성된 firstpost.md파일을 Visual Studio Code로 열어줍니다. 위와 같은 디렉토리에 firstpost.md이라는 마크다운 파일이 생성된 것을 확인할 수 있습니다. firstpost.md 파일을 열면, 다음과 같이 작성되어 있습니다. 12345---title: firstpostdate: 2019-01-03 19:42:59tags:--- title은 자동으로 파일명과 똑같이 설정됩니다. 원하는 title로 수정한 후,아래의 ---의 다음 줄부터 마크다운 문법을 이용하여 글을 작성하시면 됩니다. 글 작성시, 실시간으로 포스팅한 모습을 확인하고 싶을 때는 터미널에 아래와 같은 명령어를 입력해줍니다. 1234$ hexo server// 기본 명령어$ hexo s// 축약 명령어 웹 브라우저에서 localhost:4000 경로로 접속하시면, 블로그의 모습을 실시간으로 확인할 수 있습니다. 포스트를 작성한 후, 실제로 서버에 올라갈 정적 페이지를 생성해줍니다. 1234$ hexo generate// 기본 명령어$ hexo g// 축약 명령어 터미널에서 위 코드를 실행하면, blog/public/ 디렉토리 아래에 실제 서버에 올라갈 웹페이지가 생성된 것을 확인할 수 있습니다. 6. GitHub과 Hexo를 연결해주기 로컬 외에 외부에서도 볼 수 있도록 서버에 올립니다. 1) GitHub에 Deploy 해 줄 플러그인을 설치합니다.1$ npm install --save hexo-deployer-git 2) Hexo 설정파일인 _config.yml를 열어서 #URL부분과 #Deployment부분을 수정해 줍니다. #URL부분을 위와 같이 수정해줍니다. #Deployment부분 역시 위와 같이 수정해줍니다. 3) GitHub 서버에 파일 올리기 터미널에서 명령어를 실행하여, GitHub 서버에 블로그 파일을 올려줍니다. 1234$ hexo deployment// 기본 명령어$ hexo d// 축약 명령어 Tip! 정적 페이지 생성과 배포를 함께 하고 싶다면, 아래 코드를 입력해줍니다.1$ hexo g -d 포스트 작성시 참고한 링크 [블로그 프레임워크 Hexo]:https://mechanickim.github.io/2018/03/17/20180317_blog_hexo/index.html [Github pages와 Hexo를 이용하여 블로그 만들기]:http://blog.lattecom.xyz/2016/06/28/hexo-blog-github-pages [GitLab Pages에 Hexo 블로그 설치하기]:http://inote.gitlab.io/2017/GitLab%EC%97%90%EC%84%9C%20Hexo%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0 [Hexo 블로그 만들기 1]:https://wonheesoo.github.io/2018/01/13/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-1-%EC%84%9C%EB%A1%A0-Hexo%EC%99%80-Github-Page-%EC%A1%B0%ED%95%A9%ED%95%98%EA%B8%B0 [Hexo, 정말 쉬운 블로그 프레임워크]:https://m.blog.naver.com/future_creator/220722153999 [Hexo로 Github 블로그 만들기]:https://medium.com/@dongmi.public/why-hexo-67070b1e0cc3 Reference [Hexo 공식 홈페이지 문서(한글)]:https://hexo.io/ko/docs/ [마크다운 문서 작성법]:https://gist.github.com/ihoneymon/652be052a0727ad59601","categories":[{"name":"Blog","slug":"blog","permalink":"https://JihyeHwang09.github.io/categories/blog/"},{"name":"Hexo","slug":"blog/hexo","permalink":"https://JihyeHwang09.github.io/categories/blog/hexo/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://JihyeHwang09.github.io/tags/blog/"},{"name":"framework","slug":"framework","permalink":"https://JihyeHwang09.github.io/tags/framework/"},{"name":"platform","slug":"platform","permalink":"https://JihyeHwang09.github.io/tags/platform/"},{"name":"hexo","slug":"hexo","permalink":"https://JihyeHwang09.github.io/tags/hexo/"},{"name":"Static Web Generator","slug":"static-web-generator","permalink":"https://JihyeHwang09.github.io/tags/static-web-generator/"},{"name":"git","slug":"git","permalink":"https://JihyeHwang09.github.io/tags/git/"},{"name":"node.js","slug":"node-js","permalink":"https://JihyeHwang09.github.io/tags/node-js/"}]},{"title":"정적블로그 플랫폼(Static Web Generator)의 비교","slug":"blog-platform","date":"2019-01-02T08:09:11.680Z","updated":"2019-01-06T14:38:26.538Z","comments":true,"path":"2019/01/02/blog-platform/","link":"","permalink":"https://JihyeHwang09.github.io/2019/01/02/blog-platform/","excerpt":"","text":"정적 블로그 플랫폼 설명에 앞서,정적 웹페이지와 동적 웹페이지란 무엇이며 어떤 차이가 있는지를 살펴봅시다. 정적 페이지 VS 동적 페이지정적(static) 페이지 단순히 사이트 관리자가 미리 만들어놓은 웹 페이지를 볼 수 있는 사이트 데이터베이스(DB)를 사용하지 않음 Jekyll, Hexo, Hugo 등 동적(dynamic) 페이지 컨텐츠 내용이 서버에 있는 DB에 저장-&gt; 그 결과가 웹페이지에 반영되는 형태로 동작 일반적인 게시판 형태의 사이트들이 사용하는 방식 티스토리, 네이버 블로그 등 정적블로그 플랫폼(Static Web Generator)의 비교(Jekyll, Hexo, Hugo) Jekyll 특징 Ruby 기반 Github Page에 Git History 충돌 없이 포스트 버전관리 가능 GitHub Page는 Jekyll에 최적화되어 있음 한글 레퍼런스가 가장 많음 현재 가장 많은 사용자를 보유(Github 별 개수가 가장 많음) 단점 Ruby기반으로 초기 구축에 어려움이 있음(Ruby를 모르면, 플러그인 등 커스터마이징 하는데 불편할 수 있음) 윈도우 공식 지원 안됨 컴파일 속도가 느림 Hugo 특징 Golang 기반 컴파일 속도가 빠름(Jekyll, Hexo와 비교시 가장 빠름) 문서화가 잘 되어 있음 단점: 한글 레퍼런스가 거의 없음 Hexo 특징 자바스크립트(node.js) 기반 Node.js가 설치되어 있어야 하며, 기본적인 npm 사용 방법을 알아야 함 마크다운 문서로 만든 포스팅을 하는 방법이 간단함 윈도우 지원됨 컴파일 속도가 빠름 단점 Git으로 포스트 버전관리가 불가능함-&gt; 버전 관리를 위해서는 두 가지 브랜치를 따서 관리해야 함 Node.js의 템플릿 엔진을 그대로 사용 불가능(Github Page에는 Jekyll이 내장되어 있기 때문) 영어보다는 중국어로 된 질의응답이 많음 결론 앞서 살펴보았듯이 블로그 플랫폼 각각이 장단점을 가지고 있기 때문에우위를 따질 수는 없는 것 같습니다. 다만, 각 플랫폼의 장단점을 고려한 후, 본인에게 맞는 블로그 플랫폼을 선택하시는 게 좋겠죠:) 저는 비교적 익숙한 언어인 JavaScript 기반인 Hexo로 블로그를 시작하고, 차후에 Hugo로 이전을 고려해보는 방향으로 가닥을 잡았습니다. 포스트 작성시 참고한 링크 [정적 웹페이지 vs 동적 웹페이지]: http://snowdeer.github.io/blog/2016/03/21/static-dynamic-webpage [jekyll 블로그 프레임워크 비교, 왜 지킬인가? (feat. jekyll, hexo, hugo)]: https://qvil.github.io/blog/why-jekyll/#what [hugo + github 블로그 만들기 (feat. hugo &amp; github page)]: https://github.com/Integerous/Integerous.github.io [깃헙을 이용하여 호스팅하기]: https://www.slideshare.net/ssuser458523/ss-77033329 [정적 블로그, hexo 설치]: https://engineering.huiseoul.com/%EC%A0%95%EC%A0%81-%EB%B8%94%EB%A1%9C%EA%B7%B8-hexo-%EC%84%A4%EC%B9%98-f8df865a693a [웹의 이해 정적 페이지,동적 페이지 ]: http://coashanee5.blogspot.com/2017/07/blog-post_25.html","categories":[{"name":"Blog","slug":"blog","permalink":"https://JihyeHwang09.github.io/categories/blog/"},{"name":"Hexo","slug":"blog/hexo","permalink":"https://JihyeHwang09.github.io/categories/blog/hexo/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://JihyeHwang09.github.io/tags/blog/"},{"name":"framework","slug":"framework","permalink":"https://JihyeHwang09.github.io/tags/framework/"},{"name":"platform","slug":"platform","permalink":"https://JihyeHwang09.github.io/tags/platform/"},{"name":"hexo","slug":"hexo","permalink":"https://JihyeHwang09.github.io/tags/hexo/"},{"name":"Static Web Generator","slug":"static-web-generator","permalink":"https://JihyeHwang09.github.io/tags/static-web-generator/"},{"name":"Jekyll","slug":"jekyll","permalink":"https://JihyeHwang09.github.io/tags/jekyll/"},{"name":"Hugo","slug":"hugo","permalink":"https://JihyeHwang09.github.io/tags/hugo/"}]}]}